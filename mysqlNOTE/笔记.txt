

数据库三个范式
1.属性不可拆分
2.非主键对组合主键部分依赖不允许
3.不允许传递依赖




PROMPT \h~\u~\d:
CREATE DATABASE;
SHOW WARNINGS;
SHOW DATABASES;
SHOW CREATE DATABASE [databasename];
ALTER DATABASE [databasename] DEFAULT CHARACTER SET [utf8/gbk];改变编码
USE [databasename];打开数据库
SELECT DATABASE();得到当前打开的数据库名
DROP DATABASE [databasename];
SET NAMES GBK 设置客户端和链接端 临时编码GBK 






存储引擎
show engines; 查看所有存储引擎
show variables like 'have%'; 查看支持的存储引擎
show variables like 'storage_engine';查看默认存储引擎


创建表



CREATE TABLE IF NOT EXISTS cms_cate
(
	
id TINYINT,
    
cateName VARCHAR(50),
    
cateDesc VARCHAR(200)

)engine=MyISAM charset=utf8;

查看表结构 
DESC [table name];
DESCRIBE [table name];
show columns from[table name];

向表中插入记录 INSERT [table name] VALUES([value1],[2].......);
INSERT [table name]([table item],[table item ],...) VALUES ([],[],[]...)
查询表中所有记录 select *from [table name];


UNSIGNED 
cateName TINYINT UNSIGNED 
无符号
ZEROFILL
cateName TINYINT ZEROFILL,
会自动加上unsigned 并且对长度不足部分补0
主键 PRIMARY KEY （或者KEY）
多字段主键（一个表只能有一个主键）
PRIMARY KEY([id],[cardnum])
AUTO_INCREATEMENT 自增长 只能标志主键。
INSERT [table name]([table item],...) VALUES([insert value],...);
或者INSERT [table name ] values （NULL,.....）

CREATE TABLE IF NOT EXISTS cms_cate
(
	
id TINYINT,
    
cateName VARCHAR(50),
    
cateDesc VARCHAR(200)

PRIMARY KEY (cateName，cateDesc)，  
                     /* 主码由两个属性构成，必须作为表级完整性进行定义*/
FOREIGN KEY (cateName) REFERENCES Student(cateName)，
                     /* 表级完整性约束条件，cateName是外码，被参照表是Student */
FOREIGN KEY (cateDesc) REFERENCES Course(cateDesc)
                     /* 表级完整性约束条件， cateDesc是外码，被参照表是Course*/


)engine=MyISAM charset=utf8 AUTO_INCREATEMENT=100;从100开始自增长
ALTER TABLE [table name] AUTO_INCREATEMENT=100;修改自增长的值

NOT NULL 非空约束
DEFAULT 默认值

cateDesc VARCHAR(200） DEFAULT ‘默认数据',  
INSERT [table name ] values （NULL,DEFAULT,.....）

UNIQUE
唯一 表中只能有一个唯一。插入不能重复。NULL可以重复。




查询表中特定数据
select *from [table name] WHERE [table item]=[value];

改表名
AKTER TABLE [table name] RENAME [new name];
RENAME [table name] TO [new name];

添加表的字段
{
ALTER TABLE [table name] 
ADD [后与上定义字段相同。] [first],
ADD [后与上定义字段相同。] [first],
....,
ADD [后与上定义字段相同。] [first];
}
ALTER TABLE [table name] ADD [后与上定义字段相同。] AFTER [某字段后];

删除某字段
ALTER TABLE [table name] DROP [字段名];
{
ALTER TABLE [table name] 
DROP [字段名],
DROP [字段名],

DROP [字段名],
...,
DROP [字段名];
}
添加删除可混写。



update student set name='李阳' where id=2
DELETE FROM 表名 WHERE 字段1 = ‘’ and 字段2 = ‘’ and ...
Delete 表名






建立索引
这是最基本的索引，它没有任何限制。它有以下几种创建方式：
CREATE INDEX indexName ON mytable(username(length)); 
CREATE [unique or CLUSTER]INDEX Stusname  ON Student(Sname);
DROP INDEX [indexName] ON mytable; 
ALTER table mytable ADD UNIQUE [indexName] (username(length))
如果是CHAR，VARCHAR类型，length可以小于字段实际长度；如果是BLOB和TEXT类型，必须指定 length。




